// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

import "@openzeppelin/contracts/token/ERC20/ERC20.sol";

contract VotingToken is ERC20 {
    constructor() ERC20("VotingToken", "VOTE") {
        _mint(msg.sender, 1000 * 10**decimals());
    }
}

contract Voting {
    address public admin;
    VotingToken public votingToken;
    mapping(uint256 => uint256) public votes;

    event Voted(address indexed voter, uint256 option);

    modifier onlyAdmin() {
        require(msg.sender == admin, "Not authorized");
        _;
    }

    constructor(address _tokenAddress) {
        admin = msg.sender;
        votingToken = VotingToken(_tokenAddress);
    }

    function vote(uint256 option) external {
        require(option > 0 && option <= 5, "Invalid option");
        require(votingToken.balanceOf(msg.sender) > 0, "Not enough tokens");

        votes[option]++;
        votingToken.transferFrom(msg.sender, address(this), 1);

        emit Voted(msg.sender, option);
    }

    function getVotes(uint256 option) external view returns (uint256) {
        require(option > 0 && option <= 5, "Invalid option");
        return votes[option];
    }
}
